//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class BattlerEntity {

    static readonly ECS.Components.KilledComponent killedComponent = new ECS.Components.KilledComponent();

    public bool isKilled {
        get { return HasComponent(BattlerComponentsLookup.Killed); }
        set {
            if (value != isKilled) {
                var index = BattlerComponentsLookup.Killed;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : killedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class BattlerMatcher {

    static Entitas.IMatcher<BattlerEntity> _matcherKilled;

    public static Entitas.IMatcher<BattlerEntity> Killed {
        get {
            if (_matcherKilled == null) {
                var matcher = (Entitas.Matcher<BattlerEntity>)Entitas.Matcher<BattlerEntity>.AllOf(BattlerComponentsLookup.Killed);
                matcher.componentNames = BattlerComponentsLookup.componentNames;
                _matcherKilled = matcher;
            }

            return _matcherKilled;
        }
    }
}
